{"version":3,"sources":["app.js"],"names":["path","require","express","bodyParser","errorController","sequelize","Product","User","CartItem","OrderItem","app","set","adminRoutes","extended","use","join","__dirname","res","next","findByPk","then","user","console","log","err","shopRoutes","get404","onDelete","hasMany","belongsTo","constraints","through","belongsToMany","Cart","hasOne","result","Order","create","name","email","listen"],"mappings":"aACA,IAAMA,KAAOC,QAAQ,QAGfC,QAAUD,QAAQ,WAGlBE,WAAaF,QAAQ,eAGrBG,gBAAkBH,QAAQ,uBAG1BI,UAAYJ,QAAQ,mBAGpBK,QAAUL,QAAQ,oBAClBM,KAAON,QAAQ,iBADfK,KAAOL,QAAU,iBAGjBO,SAAWP,QAAQ,sBAFnBM,MAAON,QAAQ,kBAIfQ,UAAYR,QAAQ,uBAFpBO,IAAQN,UAEdQ,IAAMD,IAAAA,cAAmB,OAQzBC,IAAIC,IAAI,QAAS,SAGjB,IAAMC,YAAcX,QAAQ,kBAJxBU,WAAIV,QAAe,iBAIvBS,IAAME,IAAAA,WAAcX,WAAQ,CAAAY,UAAD,KAO3BH,IAAII,IAAIZ,QAAO,OAAQF,KAAKe,KAAKC,UAAW,YAHZH,IAAAA,IAAAA,SAAAA,EAAUI,EAAAC,GAA1CX,KAEAY,SAAA,GAMKC,KAAK,SAAAC,GALNP,EAAIZ,KAAOmB,EAOTH,MAVN,MAOOC,SAAAA,GAAAA,OAALG,QACQC,IAAAC,OAIId,IAAAI,IAAA,SAAWF,aAAXF,IALZI,IAAAW,YASFf,IAAII,IAAIV,gBAAUQ,QAIlBF,QAAQN,UAAAA,KAAgBsB,CAAAA,aAExB,EAAAC,SAAA,YAEApB,KAAKqB,QAAQtB,SADbA,KAAAA,OAAQuB,MAAkBC,KAAAA,UAAavB,MAAMoB,KAAAA,cAAUrB,QAAA,CAAAyB,QAAAvB,WAA/BF,QAAxB0B,cAAAC,KAAA,CAAAF,QAAAvB,WACAD,MAAKqB,UAAQtB,MACbC,KAAK2B,QAAOD,OACZA,MAAKJ,cAALvB,QAAA,CAAAyB,QAAAtB,YAC4BJ,UACE0B,OAA9BX,KAAA,SAAAe,GACAC,OAAMP,KAAUtB,SAAhB,KAE+BwB,KAAAA,SAAAA,GAE/B,OAAAV,GAUad,KAAK8B,OAAO,CAAEC,KAAM,MAAOC,MAAO,oBAF5CnB,KAAK,SAAAC,GAEF,OAAOd,EAAK8B,eAAsBE,KAAAA,SAAAA,GAAf7B,IAAnB8B,OAAA,OAhBsB,MA2BnB,SAAAhB,GATLF,QAAOD,IAAPG","file":"app.min.js","sourcesContent":["// requires path object, the object is defined in the other .js files\r\nconst path = require('path')\r\n\r\n// requires express module installed\r\nconst express = require('express')\r\n\r\n// requires body-parser object, defined on other .js pages\r\nconst bodyParser = require('body-parser')\r\n\r\n// imports error controller location\r\nconst errorController = require('./controllers/error')\r\n\r\n// imports sequelize database location\r\nconst sequelize = require('./util/database')\r\n\r\n// import sequelize models location\r\nconst Product = require('./models/product')\r\nconst User = require('./models/user')\r\nconst Cart = require('./models/cart')\r\nconst CartItem = require('./models/cart-item')\r\nconst Order = require('./models/order')\r\nconst OrderItem = require('./models/order-item')\r\n\r\n// creates express object named app\r\nconst app = express()\r\n\r\n// sets global config value, this is settings the default engine and its location\r\n\r\napp.set('view engine', 'ejs')\r\napp.set('views', 'views')\r\n\r\n// creates objects with a path defined\r\nconst adminRoutes = require('./routes/admin')\r\nconst shopRoutes = require('./routes/shop')\r\n\r\n// not sure\r\napp.use(bodyParser.urlencoded({ extended: false }))\r\n\r\n// defines a location to allow access to files you otherwise could not access\r\napp.use(express.static(path.join(__dirname, 'public')))\r\n\r\n// registering middleware, function call to database to retrieve user\r\napp.use((req, res, next) => {\r\n  User.findByPk(1)\r\n    .then(user => {\r\n      req.user = user\r\n      next()\r\n    })\r\n    .catch(err => console.log(err))\r\n})\r\n\r\n// defines page locations\r\napp.use('/admin', adminRoutes)\r\napp.use(shopRoutes)\r\n\r\n// defines response for a url error 404\r\napp.use(errorController.get404)\r\n\r\n// relates modules to database\r\nProduct.belongsTo(User, { constraints: true, onDelete: 'CASCADE' })\r\nUser.hasMany(Product)\r\nUser.hasOne(Cart)\r\nCart.belongsTo(User)\r\nCart.belongsToMany(Product, { through: CartItem })\r\nProduct.belongsToMany(Cart, { through: CartItem })\r\nOrder.belongsTo(User)\r\nUser.hasMany(Order)\r\nOrder.belongsToMany(Product, { through: OrderItem })\r\n\r\n// checks models defined, creates tables for them and relations if they do not already exist\r\nsequelize\r\n  // .sync({ force: true })\r\n  .sync()\r\n  .then(result => {\r\n    return User.findByPk(1)\r\n    // console.log(result)\r\n  })\r\n  .then(user => {\r\n    if (!user) {\r\n      return User.create({ name: 'Max', email: 'test@test.com' })\r\n    }\r\n    return user\r\n  })\r\n  .then(user => {\r\n    // console.log(user)\r\n    return user.createCart()\r\n  })\r\n  .then(cart => {\r\n    app.listen(3000)\r\n  })\r\n  .catch(err => {\r\n    console.log(err)\r\n  })\r\n"]}