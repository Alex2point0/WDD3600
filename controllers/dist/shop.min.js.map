{"version":3,"sources":["shop.js"],"names":["Product","require","exports","getProducts","req","res","next","fetchall","products","prods","getProduct","prodId","params","productId","product","console","log","getIndex","getCart","Cart","cart","cartProducts","find","prod","id","cartProductData","push","productData","qty","render","path","postCart","body","findById","addProduct","price","redirect","postCartDeleteProduct","deleteProduct","getOrders","pageTitle","getCheckout"],"mappings":"aACA,IAAMA,QAAUC,QAAQ,qBAAlBD,KAAOC,QAAU,kBAKvBC,QAAQC,YAAc,SAACC,EAAKC,EAAKC,GAC/BN,QAAQO,SAAS,SAACC,GADpBN,EAAQC,OAAAA,oBAAc,CACpBH,MAAQO,EACNF,UAAW,eACTI,KAAK,iBAQXP,QAAQQ,WAAa,SAACN,EAAKC,EAAKC,GAC9B,IAAMK,EAASP,EAAIQ,OAAOC,UAD5BX,QAAQQ,SAARC,EAAqB,SAAAG,GACnBC,QAAYC,IAAGZ,KAEbW,EAAAA,SAAA,MAMJb,QAAQe,SAAW,SAACb,EAAKC,EAAKC,GAC5BN,QAAQO,SAAS,SAACC,GADpBN,EAAQe,OAAAA,aAAYb,CAClBJ,MAAQO,EACNF,UAAW,OACTI,KAAK,SAQXP,QAAQgB,QAAU,SAACd,EAAKC,EAAKC,GAC3Ba,KAAKD,QAAQ,SAAAE,GADflB,QAAQgB,SAAU,SAAAV,GACZ,IAACU,EAAQE,GADSf,GAAAA,EAAAA,GAAAA,EAAAA,OAAAA,EAAAA,IAEpBL,IAAAA,IAAAA,EAAAA,EAAiBQ,EAAjBR,OAAAA,cAAAA,GAAAA,EAAAA,EAAAA,QAAAA,MAAAA,GAAAA,EAAiBQ,CAAVM,QAAUN,EAAAA,MACf,IAAMa,EAAND,EAAAZ,SAAAc,KAAA,SAAAC,GAAA,OAAAA,EAAAC,KAAAV,QAAAU,KAD2BC,GAAAJ,EAAAK,KAAA,CAAAC,YAAAb,QAAAc,IAAAH,EAAAG,OAFTvB,MAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,QAAAA,IAAAA,GAAAA,MAAAA,EAAAA,QAAAA,EAAAA,SAAAA,QAAAA,GAAAA,EAAAA,MAAAA,GAIlBA,EAAAwB,OAAA,YAAgBrB,CAAXM,UAAqB,YACxBgB,KAAML,QAAyCjB,SAAAa,SAE3BnB,QAAA6B,SAAlB,SAAA3B,EAAAC,EAAAC,GACD,IAAAK,EAAAP,EAAA4B,KAAAnB,UACFb,QAAAiC,SAAAtB,EAAA,SAAAG,GAP0BK,KAAAe,WAAAvB,EAAAG,EAAAqB,SAAA9B,EAAA+B,SAAA,UAAAlC,QAAAmC,sBAAA,SAAAjC,EAAAC,EAAAC,GAAA,IAAAK,EAAAP,EAAA4B,KAAAnB,UAAAb,QAAAiC,SAAAtB,EAAA,SAAAG,GAAAK,KAAAmB,cAAA3B,EAAAG,EAAAqB,OAAA9B,EAAA+B,SAAA,YAoCjClC,QAAQqC,UAAY,SAACnC,EAAKC,EAAKC,GA3BzBD,EAAAA,OAAIwB,cAAJ,CACEW,UAAAA,cACAV,KAAAA,aAKP5B,QAEDuC,YAAA,SAAArC,EAAAC,EAAAC,GA2BED,EAAIwB,OAAO,gBAAiB,CAC1BW,UAAW,WA3BftC,KAAQ6B","file":"shop.min.js","sourcesContent":["// constant holding required product location\r\nconst Product = require('../models/product')\r\n\r\nconst Cart = require('../models/cart')\r\n\r\n// export function to get all products\r\nexports.getProducts = (req, res, next) => {\r\n  Product.fetchall((products) => {\r\n    res.render('shop/product-list', {\r\n      prods: products,\r\n      pageTitle: 'All Products',\r\n      path: '/products'\r\n    })\r\n  })\r\n}\r\n\r\n// export function to get singular product\r\nexports.getProduct = (req, res, next) => {\r\n  const prodId = req.params.productId\r\n  Product.findById(prodId, product => {\r\n    console.log(product)\r\n  })\r\n  res.redirect('/')\r\n}\r\n\r\n// export function to get content for shop page\r\nexports.getIndex = (req, res, next) => {\r\n  Product.fetchall((products) => {\r\n    res.render('shop/index', {\r\n      prods: products,\r\n      pageTitle: 'Shop',\r\n      path: '/'\r\n    })\r\n  })\r\n}\r\n\r\n// export function to get content for cart page\r\nexports.getCart = (req, res, next) => {\r\n  Cart.getCart(cart => {\r\n    Product.fetchall(products => {\r\n      const cartProducts = []\r\n      for (product of products) {\r\n        const cartProductData = cart.products.find(prod => prod.id === product.id)\r\n        if (cartProductData) {\r\n          cartProducts.push({ productData: product, qty: cartProductData.qty })\r\n        }\r\n      }\r\n\r\n      res.render('shop/cart', {\r\n        pageTitle: 'Your Cart',\r\n        path: '/cart',\r\n        products: cartProducts\r\n      })\r\n    })\r\n  })\r\n}\r\n\r\n// export function to get content for cart page\r\nexports.postCart = (req, res, next) => {\r\n  const prodId = req.body.productId\r\n  Product.findById(prodId, (product) => {\r\n    Cart.addProduct(prodId, product.price)\r\n  })\r\n  res.redirect('/cart')\r\n}\r\n\r\nexports.postCartDeleteProduct = (req, res, next) => {\r\n  const prodId = req.body.productId\r\n  Product.findById(prodId, product => {\r\n    Cart.deleteProduct(prodId, product.price)\r\n    res.redirect('/cart')\r\n  })\r\n}\r\n\r\n// export function to get content for orders page\r\nexports.getOrders = (req, res, next) => {\r\n  res.render('shop/orders', {\r\n    pageTitle: 'Your Orders',\r\n    path: '/orders'\r\n  })\r\n}\r\n\r\n// export function to get content for checkout page\r\nexports.getCheckout = (req, res, next) => {\r\n  res.render('shop/checkout', {\r\n    pageTitle: 'Checkout',\r\n    path: '/checkout'\r\n  })\r\n}\r\n"]}