{"version":3,"sources":["shop.js"],"names":["Product","require","exports","getProducts","req","res","next","fetchAll","products","render","prods","pageTitle","err","console","log","getProduct","prodId","params","productId","findByPk","product","path","title","getIndex","postCart","addToCart","then","result","redirect","postCartDeleteProduct","user","deleteItemFromCart","fetchedCart","postOrder","addOrder","getOrders","orders"],"mappings":"aACA,IAAMA,QAAUC,QAAQ,qBAGxBC,QAAQC,YAAc,SAACC,EAAKC,EAAKC,GAC/BN,QAAQO,WADVL,KAAQC,SAAAA,GACNH,EAAQO,OAAAA,oBACAC,CACAC,MAAOD,EACTE,UAAOF,eACPG,KAAAA,gBAJN,MAAA,SAAAC,GASIC,QAAQC,IAAIF,MAKlBV,QAAQa,WAAa,SAAAX,EAAAC,EAACD,GACpB,IAAMY,EAASZ,EAAIa,OAAOC,UAC1BlB,QAAQmB,SAASH,GAEbX,KAAII,SAAAA,GACFW,EAAAA,OAASA,sBADuB,CAEhCT,QAAWS,EACXC,UAAMD,EAAAE,MAHRD,KAAA,gBAFJrB,MAAA,SAAAY,GAAA,OAAAC,QAAAC,IAAAF,MAYFV,QAAQqB,SAAW,SAAAnB,EAAAC,EAACD,GAClBJ,QAAQO,WAEJF,KAAII,SAAAA,GACFC,EAAAA,OAAOF,aADgB,CAEvBG,MAASH,EACTa,UAAM,OAHRA,KAAA,QAFJrB,MAAA,SAAAY,GAaFC,QAAAC,IAAAF,MAKMP,QAAII,QAAO,SAAAL,EAAAC,EAAaC,GACtBe,EAAAA,KACAV,UACAH,KAAAA,SAAAA,GAHFH,EAAAI,OAAA,YAAA,CAHJY,KASS,QAAGV,UAAYG,YATxBN,SAAAA,MAIMa,MAKG,SAAAT,GAAG,OAAIC,QAAQC,IAAIF,MAO1BV,QAAAsB,SAAO,SAASC,EAAAA,EAAUL,GAC3B,IACEM,EAAKtB,EAAAuB,KAAMT,UACVL,QAAAA,SAAYc,GAAZD,KAAA,SAAAN,GACAf,OAAIuB,EAAAA,KAASH,UAAbL,KAEJM,KAAA,SAAAC,GAHId,QAAQC,IAAIa,GACZtB,EAAIuB,SAAS,YAwCd1B,QAJH2B,sBAKY,SAAAzB,EAAAC,EAAAC,GAAA,IAAAU,EAAIH,EAAQC,KAARI,UAAJd,EALZ0B,KAOFC,mBAAAf,GALKU,KAAK,SAAAC,GACJtB,EAAIuB,SAAS,WAEL,MAIRI,SAAAA,GAAAA,OAAJnB,QAAAC,IAAAF,MAKGV,QAJH+B,UAKS,SAAA7B,EAAAQ,EAAGN,GAAAF,EALZ0B,KAQFI,WANKR,KAAK,SAAAC,GACJtB,EAAIuB,SAAS,aAEL,MAMTO,SAAAA,GAAAA,OAAAA,QACAT,IAAKd,MAIFwB,QAAAA,UAAQA,SAAAA,EAAAA,EAAAA,GAHgBhC,EAA1B0B,KAHJK,YASYT,KAAA,SAAAU,GATZ/B,EAAAI,OAAA,cAAA,CADFY,KAAA,UAMQV,UAAW,cACXyB,OAAQA,MAHgB,MAMrB,SAAAxB,GAAG,OAAIC,QAAQC,IAAIF","file":"shop.min.js","sourcesContent":["// constant holding required product location\r\nconst Product = require('../models/product')\r\n\r\n// export function to get all products\r\nexports.getProducts = (req, res, next) => {\r\n  Product.fetchAll()\r\n    .then(products => {\r\n      res.render('shop/product-list', {\r\n        prods: products,\r\n        pageTitle: 'All Products',\r\n        path: '/products'\r\n      })\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n}\r\n\r\n// export function to get singular product\r\nexports.getProduct = (req, res, next) => {\r\n  const prodId = req.params.productId\r\n  Product.findByPk(prodId)\r\n    .then(product => {\r\n      res.render('shop/product-detail', {\r\n        product: product,\r\n        pageTitle: product.title,\r\n        path: '/products'\r\n      })\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n\r\n// export function to get content for shop page\r\nexports.getIndex = (req, res, next) => {\r\n  Product.fetchAll()\r\n    .then(products => {\r\n      res.render('shop/index', {\r\n        prods: products,\r\n        pageTitle: 'Shop',\r\n        path: '/'\r\n      })\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n}\r\n\r\n// export function to get content for cart page\r\nexports.getCart = (req, res, next) => {\r\n  req.user\r\n    .getCart()\r\n    .then(products => {\r\n      res.render('shop/cart', {\r\n        path: '/cart',\r\n        pageTitle: 'Your Cart',\r\n        products: products\r\n      })\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n\r\n// export function to get content for cart page\r\nexports.postCart = (req, res, next) => {\r\n  const prodId = req.body.productId\r\n  Product.findbyid(prodId).then(product => {\r\n    return req.user.addToCart(product)\r\n  })\r\n    .then(result => {\r\n      console.log(result)\r\n      res.redirect('/cart')\r\n    })\r\n  /*\r\n  let fetchedCart\r\n  let newQuantity = 1\r\n  req.user\r\n    .getCart()\r\n      fetchedCart = cart\r\n      return cart.getProducts({ where: { id: prodId } })\r\n    })\r\n    .then(products => {\r\n      let product\r\n      if (products.length > 0) {\r\n        product = products[0]\r\n      }\r\n      if (product) {\r\n        const oldQuantity = product.cartItem.quantity\r\n        newQuantity = oldQuantity + 1\r\n        return product\r\n      }\r\n      return Product.findById(prodId)\r\n    })\r\n    .then(product => {\r\n      return fetchedCart.addProduct(product, {\r\n        through: { quantity: newQuantity }\r\n      })\r\n    })\r\n    .then(() => {\r\n      res.redirect('/cart')\r\n    })\r\n    .catch(err => console.log(err))\r\n    */\r\n}\r\n\r\nexports.postCartDeleteProduct = (req, res, next) => {\r\n  const prodId = req.body.productId\r\n  req.user\r\n    .deleteItemFromCart(prodId)\r\n    .then(result => {\r\n      res.redirect('/cart')\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n// something\r\nexports.postOrder = (req, res, next) => {\r\n  let fetchedCart\r\n  req.user\r\n    .addOrder()\r\n    .then(result => {\r\n      res.redirect('/orders')\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n\r\n// export function to get content for orders page\r\nexports.getOrders = (req, res, next) => {\r\n  req.user\r\n    .getOrders()\r\n    .then(orders => {\r\n      res.render('shop/orders', {\r\n        path: '/orders',\r\n        pageTitle: 'Your Orders',\r\n        orders: orders\r\n      })\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n"]}