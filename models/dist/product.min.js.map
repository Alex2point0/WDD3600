{"version":3,"sources":["product.js"],"names":["fs","require","path","p","join","dirname","process","mainModule","filename","cb","readFile","err","fileContent","getProductsFromFile","module","exports","Product","title","imageUrl","description","price","_classCallCheck","this","_createClass","key","value","_this","id","Math","random","toString","products","JSON","console","log","writeFile","stringify"],"mappings":"mZACA,IAAMA,GAAKC,QAAQ,MAGbC,KAAOD,QAAQ,QAGfE,EAAID,KAAKE,KAPfF,KAAAG,QAAAC,QAAAC,WAAAC,UACA,OAAWP,iBAGLC,oBAEN,SAAAO,GAOET,GAAGU,SAASP,EAAG,SAACQ,EAAKC,GANhBH,EAOCE,EAPET,GAKJW,KAAAA,MAAAA,OAMDC,OAAAC,QAAA,WACF,SAAAC,EANDC,EAAAC,EAAAC,EAAAC,GAAAC,gBAAAC,KAAAN,GASFM,KAAAL,MAAAA,EAIIK,KAAKJ,SAAWA,EAChBI,KAAKH,YAAcA,EAJvBL,KAAOC,MAAPK,EALK,OAAAG,aAAAP,EAAA,CAAA,CAAAQ,IAAA,OAAAC,MAAA,WAM+C,IAAAC,EAAAJ,KAShDA,KAAKK,GAAKC,KAAKC,SAASC,WARxBjB,oBAAA,SAAAkB,GACAA,EAAKb,KAAWA,GAChBlB,GAAKmB,UAAAA,EAALa,KAAmBb,UAAnBY,GAAA,SAAApB,GACAsB,QAAAC,IAAad,UAVZ,CAAA,CAAAI,IAAA,WAAAC,MAAA,SAKLhB,GASUI,oBAAAJ,KAdL,CAAAe,IAAA,WAAAC,MAAA,SAgBDZ,EAAAA,GACEkB,oBAAc,SAAAA,GACd/B,IAAGmC,EAAHJ,EAAqBK,KAAAA,SAAAA,GAAAA,OAAUL,EAAAA,KAAWJ,IACxCM,EAAAA,SAnBHjB,EAAA","file":"product.min.js","sourcesContent":["// fs constant is holding a  a File object\r\nconst fs = require('fs')\r\n\r\n// path constant is holding a required path object, providing a location to access\r\nconst path = require('path')\r\n\r\n// will write data content to products.json file\r\nconst p = path.join(\r\n  path.dirname(process.mainModule.filename),\r\n  'data', 'products.json')\r\n\r\n// call back function to read file content\r\nconst getProductsFromFile = cb => {\r\n  fs.readFile(p, (err, fileContent) => {\r\n    if (err) {\r\n      cb([])\r\n    } else {\r\n      cb(JSON.parse(fileContent))\r\n    }\r\n  })\r\n}\r\n\r\n// exports a product object with all relevant data: title, imgUrl, description, price\r\nmodule.exports = class Product {\r\n  constructor (title, imageUrl, description, price) {\r\n    this.title = title\r\n    this.imageUrl = imageUrl\r\n    this.description = description\r\n    this.price = price\r\n  }\r\n\r\n  // writes product object data as a string to a file\r\n  save () {\r\n    this.id = Math.random().toString()\r\n    getProductsFromFile(products => {\r\n      products.push(this)\r\n      fs.writeFile(p, JSON.stringify(products), (err) => {\r\n        console.log(err)\r\n      })\r\n    })\r\n  }\r\n\r\n  // similar to a utility function that calls not on a single instance of an object but retrieves all data from object.\r\n  static fetchall (cb) {\r\n    getProductsFromFile(cb)\r\n  }\r\n\r\n  static findById (id, cb) {\r\n    getProductsFromFile(products => {\r\n      const product = products.find(p => p.id === id)\r\n      cb(product)\r\n    })\r\n  }\r\n}\r\n"]}