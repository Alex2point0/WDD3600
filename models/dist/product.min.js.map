{"version":3,"sources":["product.js"],"names":["fs","require","path","p","join","dirname","process","mainModule","filename","getProductsFromFile","cb","readFile","err","fileContent","module","exports","Product","id","title","imageUrl","description","price","_classCallCheck","this","_createClass","key","value","_this","products","existingProductIndex","findIndex","prod","updatedProducts","_toConsumableArray","writeFile","stringify","console","log","random","toString","push","product","find"],"mappings":"o2BACA,IAAMA,GAAKC,QAAQ,MAGbC,KAAOD,QAAQ,QAGfE,EAAID,KAAKE,KACbF,KAAKG,QAAQC,QAAQC,WAAWC,UAChC,OAAQ,iBAGJC,oBAAsB,SAAAC,GAC1BV,GAAGW,SAASR,EAAG,SAACS,EAAKC,GAEjBH,EADEE,EACC,GAdEX,KAAAA,MAAQY,OAMnBC,OAAOC,QAAP,WAiBE,SAAAC,EAAaC,EAAIC,EAAOC,EAAUC,EAAaC,GAAOC,gBAAAC,KAAAP,GAZlDP,KAAAA,GAAAA,EACFc,KAACZ,MAAYO,EACbK,KAAIX,SAAKO,EACPT,KAAGU,YAAHA,EACDG,KAFDF,MAEOA,EATX,OAAAG,aAAAR,EAAA,CAAA,CAAAS,IAAA,OAAAC,MAAA,WAeA,IAAAC,EAAAJ,KAYId,oBAAoB,SAAAmB,GAClB,GAAID,EAAKV,GAAI,CAZZF,IAAPc,EAAAD,EAAAE,UAAA,SAAAC,GAAA,OAAAA,EAAAd,KAAAU,EAAAV,KAAAe,EAAAC,mBAAAL,GAAAI,EAAAH,GAAAF,EACE3B,GAAAkC,UAAA/B,EAAiBe,KAAjBiB,UAAAH,GAA+CX,SAA/CT,GAAsDwB,QAAAC,IAAAzB,UAEpDe,EAAKT,GAAQA,KAAboB,SAAAC,WACAX,EAAAY,KAAgBrB,GAChBnB,GAAKoB,UAALjB,EAAmBiB,KAAAA,UAAnBQ,GAAA,SAAAhB,GACKS,QAAQA,IAAbT,UAtBJ,CAAA,CAAAa,IAAA,WAAAC,MAAA,SA0BUhB,GAqBND,oBAAoBC,KA/CxB,CAAAe,IAAA,WAAAC,MAAA,SA6BcG,EAAAA,GAA8CpB,oBAASQ,SAAAA,GAAT,IAApDwB,EAAAb,EAAAc,KAAA,SAAAvC,GAAA,OAAAA,EAAAc,KAAAA,IAwBFP,EAAG+B,SArDTzB,EAAA","file":"product.min.js","sourcesContent":["// fs constant is holding a  a File object\r\nconst fs = require('fs')\r\n\r\n// path constant is holding a required path object, providing a location to access\r\nconst path = require('path')\r\n\r\n// will write data content to products.json file\r\nconst p = path.join(\r\n  path.dirname(process.mainModule.filename),\r\n  'data', 'products.json')\r\n\r\n// call back function to read file content\r\nconst getProductsFromFile = cb => {\r\n  fs.readFile(p, (err, fileContent) => {\r\n    if (err) {\r\n      cb([])\r\n    } else {\r\n      cb(JSON.parse(fileContent))\r\n    }\r\n  })\r\n}\r\n\r\n// exports a product object with all relevant data: title, imgUrl, description, price\r\nmodule.exports = class Product {\r\n  constructor (id, title, imageUrl, description, price) {\r\n    this.id = id\r\n    this.title = title\r\n    this.imageUrl = imageUrl\r\n    this.description = description\r\n    this.price = price\r\n  }\r\n\r\n  // writes product object data as a string to a file\r\n  save () {\r\n    getProductsFromFile(products => {\r\n      if (this.id) {\r\n        const existingProductIndex = products.findIndex(prod => prod.id === this.id)\r\n        const updatedProducts = [...products]\r\n        updatedProducts[existingProductIndex] = this\r\n        fs.writeFile(p, JSON.stringify(updatedProducts), (err) => {\r\n          console.log(err)\r\n        })\r\n      } else {\r\n        this.id = Math.random().toString()\r\n        products.push(this)\r\n        fs.writeFile(p, JSON.stringify(products), (err) => {\r\n          console.log(err)\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  // similar to a utility function that calls not on a single instance of an object but retrieves all data from object.\r\n  static fetchall (cb) {\r\n    getProductsFromFile(cb)\r\n  }\r\n\r\n  static findById (id, cb) {\r\n    getProductsFromFile(products => {\r\n      const product = products.find(p => p.id === id)\r\n      cb(product)\r\n    })\r\n  }\r\n}\r\n"]}