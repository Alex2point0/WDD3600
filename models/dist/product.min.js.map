{"version":3,"sources":["product.js"],"names":["mongodb","require","getDb","Product","title","price","description","imageUrl","id","userId","_classCallCheck","this","_id","ObjectId","db","$set","collection","insertOne","then","result","console","log","err","find","toArray","db0p","products","prodId","product","deleteOne","next","module","exports"],"mappings":"mZACA,IAAMA,QAAUC,QAAQ,WAGlBC,MAAQD,QAAQ,oBAAoBC,MAGpCC,mBAPN,SAAAA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,gBAAAC,KAAAR,GACMH,KAAAA,MAAUC,EASZU,KAAKN,MAAQA,EACbM,KAAKL,YAAcA,EAPjBJ,KAAKK,SAAWA,EASlBI,KAAKC,IAAMJ,EAAK,IAAIR,QAAQa,SAASL,GAAM,KAC3CG,KAAKF,OAASA,sDAN8C,IAAAK,EAAAZ,QAqB5D,OApBAS,KAAKP,IAEAE,EACAC,WAAWA,YACXK,UAAQ,CAAGA,IAAIZ,KAAOY,KAACC,CAAZE,KAAHJ,OAIfG,EAAAE,WAAA,YAAAC,UAAAN,OAaKO,KAAK,SAAAC,GACJC,QAAQC,IAAIF,KAFT,MAVC,SAAAG,GACRF,QAAAC,IAAAC,0CAKe,OAAOpB,QAAca,WAAM,YAARQ,OAJlCC,UAMEC,KAAI,SAAAC,GAmBF,OAlBHN,QAAAC,IAAAK,GAkBUA,IArBuB,MAM9BN,SAAAA,GAFGA,QAAAC,IAIEC,sCAoBMK,GAEf,OADWzB,QAfXc,WAAWd,YACXqB,KAAA,CAAOT,IACJE,QAAWH,SAAAc,KAIVP,OACAF,KAAA,SAAAU,GAGAR,OATGA,QAAAC,IAQEO,GACEA,IAMJ,MAJR,SAAAN,GAaKF,QAAQC,IAAIC,wCARbN,GACK,OAAOhB,QAGXoB,WAAQC,YACRQ,UAAOD,CAAAA,IAAP,IAAA5B,QAAAa,SAAAc,KANGT,KAAA,SAAAC,GASHC,QAAQC,IAAIC,YANbQ,MAQJ,SAAAR,GAWKF,QAAQC,IAAIC,cAPhBS,OAAAC,QACGhB","file":"product.min.js","sourcesContent":["// import mongodb\r\nconst mongodb = require('mongodb')\r\n\r\n// import getDb\r\nconst getDb = require('../util/database').getDb\r\n\r\n// class product\r\nclass Product {\r\n  constructor (title, price, description, imageUrl, id, userId) {\r\n    this.title = title\r\n    this.price = price\r\n    this.description = description\r\n    this.imageUrl = imageUrl\r\n    this._id = id ? new mongodb.ObjectId(id) : null\r\n    this.userId = userId\r\n  }\r\n\r\n  // save method to store data in db\r\n  save () {\r\n    const db = getDb()\r\n    let db0p\r\n    if (this._id) {\r\n      // update product\r\n      db0p = db\r\n        .collection('products')\r\n        .updateOne({ _id: this._id }, { $set: this })\r\n    } else {\r\n      db0p = db.collection('products').insertOne(this)\r\n    }\r\n    return db0p\r\n      .then(result => {\r\n        console.log(result)\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n  static fetchAll () {\r\n    const db = getDb()\r\n    return db\r\n      .collection('products')\r\n      .find()\r\n      .toArray()\r\n      .then(products => {\r\n        console.log(products)\r\n        return products\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n  static findbyid (prodId) {\r\n    const db = getDb()\r\n    return db\r\n      .collection('products')\r\n      .find({ _id: mongodb.ObjectId(prodId) })\r\n      .next()\r\n      .then(product => {\r\n        console.log(product)\r\n        return product\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n  static deleteById (prodId) {\r\n    const db = getDb()\r\n    return db\r\n      .collection('products')\r\n      .deleteOne({ _id: new mongodb.ObjectId(prodId) })\r\n      .then(result => {\r\n        console.log('Delete')\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n}\r\nmodule.exports = Product\r\n"]}