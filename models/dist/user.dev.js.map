{"version":3,"sources":["user.js"],"names":["mongodb","require","getDb","ObjectId","User","username","email","cart","name","db","collection","insertOne","product","cartProductIndex","items","findIndex","cp","productId","toString","_id","newQuantity","updatedCartItems","quantity","push","updatedCart","updateOne","$set","productIds","map","i","find","$in","toArray","then","products","p","filter","item","getCart","order","user","result","userId","findOne","err","console","log","module","exports"],"mappings":"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","sourcesContent":["const mongodb = require('mongodb')\r\nconst getDb = require('../util/database').getDb\r\n\r\nconst ObjectId = mongodb.ObjectId\r\n\r\nclass User {\r\n  constructor (username, email, cart) {\r\n    this.name = username\r\n    this.name = email\r\n    this.cart = cart // {items: []}\r\n  }\r\n\r\n  save () {\r\n    const db = getDb()\r\n    return db.collection('users').insertOne(this)\r\n  }\r\n\r\n  addToCart (product) {\r\n    const cartProductIndex = this.cart.items.findIndex(cp => {\r\n      return cp.productId.toString() === product._id.toString()\r\n    })\r\n    let newQuantity = 1\r\n    const updatedCartItems = [...this.cart.items]\r\n\r\n    if (cartProductIndex >= 0) {\r\n      newQuantity = this.cart.items[cartProductIndex].quantity + 1\r\n      updatedCartItems[cartProductIndex].quantity = newQuantity\r\n    } else {\r\n      updatedCartItems.push({ productId: new ObjectId(product._id), quantity: newQuantity })\r\n    }\r\n    const updatedCart = {\r\n      items: updatedCartItems\r\n    }\r\n    const db = getDb()\r\n    return db\r\n      .collection('users')\r\n      .updateOne(\r\n        { _id: new ObjectId(this._id) },\r\n        { $set: { cart: updatedCart } }\r\n      )\r\n  }\r\n\r\n  getCart () {\r\n    const db = getDb()\r\n    const productIds = this.cart.items.map(i => {\r\n      return i.productId\r\n    })\r\n    return db\r\n      .collection('products')\r\n      .find({ _id: { $in: productIds } })\r\n      .toArray()\r\n      .then(products => {\r\n        return products.map(p => {\r\n          return {\r\n            ...p,\r\n            quantity: this.cart.items.find(i => {\r\n              return i.productId.toString() === p._id.toString()\r\n            }).quantity\r\n          }\r\n        })\r\n      })\r\n  }\r\n\r\n  deleteItemFromCart (productId) {\r\n    const updatedCartItems = this.cart.items.filter(item => {\r\n      return item.productId.toString() !== productId.toString()\r\n    })\r\n    const db = getDb()\r\n    return db\r\n      .collection('users')\r\n      .updateOne(\r\n        { _id: new ObjectId(this._id) },\r\n        { $set: { cart: { items: updatedCartItems } } }\r\n      )\r\n  }\r\n\r\n  addOrder () {\r\n    const db = getDb()\r\n    return this.getCart()\r\n      .then(products => {\r\n        const order = {\r\n          items: products,\r\n          user: {\r\n            _id: new ObjectId(this._id),\r\n            name: this.name\r\n          }\r\n        }\r\n        return db\r\n          .collection('orders')\r\n          .insertOne(this.cart)\r\n      })\r\n      .then(result => {\r\n        this.cart = { items: [] }\r\n        return db\r\n          .collection('users')\r\n          .updateOne(\r\n            { _id: new ObjectId(this._id) },\r\n            { $set: { cart: { items: [] } } }\r\n          )\r\n      })\r\n  }\r\n\r\n  getOrder () {\r\n    const db = getDb()\r\n    return db\r\n      .collection('orders')\r\n      .find({ 'user._id': new ObjectId(this._id) })\r\n      .toArray()\r\n  }\r\n\r\n  static findById (userId) {\r\n    const db = getDb()\r\n    return db\r\n      .collection('users')\r\n      .findOne({ _id: new ObjectId(userId) })\r\n      .then()\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n}\r\n\r\nmodule.exports = User\r\n"],"file":"user.dev.js"}