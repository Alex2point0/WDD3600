{"version":3,"sources":["user.js"],"names":["mongodb","require","getDb","ObjectId","User","username","email","cart","_classCallCheck","this","name","collection","insertOne","product","cartProductIndex","items","findIndex","cp","productId","toString","_id","newQuantity","_toConsumableArray","quantity","push","updatedCart","updatedCartItems","updateOne","$set","_this","db","productIds","map","i","find","toArray","then","products","p","filter","item","_this2","getCart","$in","result","user._id","userId","findOne","err","console","log","module","exports"],"mappings":"+jDAAA,IAAMA,QAAUC,QAAQ,WAClBC,MAAQD,QAAQ,oBAAoBC,MAEpCC,SAAWH,QAAQG,SAEnBC,gBACJ,SAAAA,EAAaC,EAAUC,EAAOC,GAAMC,gBAAAC,KAAAL,GAClCK,KAAKC,KAAOL,EACZI,KAAKC,KAAOJ,EACZG,KAAKF,KAAOA,sDAKZ,OADWL,QACDS,WAAW,SAASC,UAAUH,wCAG/BI,GACT,IAAMC,EAAmBL,KAAKF,KAAKQ,MAAMC,UAAU,SAAAC,GACjD,OAAOA,EAAGC,UAAUC,aAAeN,EAAQO,IAAID,aAE7CE,EAAc,EArBhBrB,EAAkBsB,mBAAxBb,KAAAF,KAAAQ,OACsB,GAAhBb,GAwBAmB,EAAcZ,KAAKF,KAAKQ,MAAMD,GAAkBS,SAAW,EAtB3DpB,EAAmBA,GAAzBoB,SAAAF,GAEMjB,EAuBiBoB,KAAK,CAAEN,UAAW,IAAIf,SAASU,EAAQO,KAAMG,SAAUF,IAE1E,IAAMI,EAAc,CAxBtBV,MAAAW,GACE,OA0BWxB,QAzBXS,WAAYL,SACZqB,UACD,CAAAP,IAAA,IAAAjB,SAAAM,KAAAW,MA4BK,CAAEQ,KAAM,CAAErB,KAAMkB,uCAzBZ,IAAAI,EAAApB,KACRqB,EAAS5B,QACV6B,EAAAtB,KAAAF,KAAAQ,MAAAiB,IAAA,SAAAC,GA8BG,OAAOA,EAAEf,YAEX,OAAOY,EA7BPnB,WAAMG,YACJoB,KAAA,CAAAd,IAAUF,CAAAA,IAAAA,KADaiB,UAGzBC,KAAIf,SAAAA,GA+BA,OAAOgB,EAASL,IAAI,SAAAM,GA9BlBZ,OAAAA,cAAAA,GAgCKY,EAhCLZ,CAEFZ,SAAAA,EAAgBP,KAApBQ,MAA2BmB,KAAA,SAAAD,GACzBZ,OAAWY,EAAGf,UAAUH,aAAMD,EAAAA,IAAhBK,aACdO,0DAGDR,GAmCD,IAAMQ,EAAmBjB,KAAKF,KAAKQ,MAAMwB,OAAO,SAAAC,GAlChD,OAAMf,EAAAA,UAAcN,aAAAD,EAAAC,aAGpB,OAHAjB,QAIAS,WACGA,SAEGS,UAHC,CAIHA,IAAA,IAAAjB,SAAAM,KAAAW,MAAEQ,CAAAA,KAAM,CAAArB,KAAA,CAAAQ,MAAAW,yCAEb,IAAAe,EAAAhC,KAqCOqB,EAAK5B,QACX,OAAOO,KAAKiC,UACTN,KAAK,SAAAC,GAnCFN,IAAU5B,SAAQI,EAAKQ,KAClBG,EAAAA,KAIDE,OAAKU,EAAEa,WAAKZ,UAAPnB,UAAA6B,EAAAlC,QAGX6B,KAAA,SAAAQ,GAGIrB,OAFFkB,EAAAlC,KAAA,CAAAQ,MAAA,IAEEQ,EACEZ,WAAQ,SACTgB,UAJH,CAAAP,IAAA,IAAAjB,SAAAsC,EAAArB,MADF,CAAAQ,KAAA,CAAArB,KAAA,CAAAQ,MAAA,4CAaF,OADIW,QAAmBf,WAAzB,UAGAuB,KAAQ,CAAAW,WAAR,IAAA1C,SAAAM,KAAAW,OACAe,6CAIYW,GAAU/B,OAAJb,QAAES,WAAA,SAARoC,QAAA,CAAA3B,IAAA,IAAAjB,SAAA2C,KAJLV,OAIerB,MAEvB,SAAAiC,GA2CKC,QAAQC,IAAIF,cAxChBG,OAAAC,QAAWlD","file":"user.min.js","sourcesContent":["const mongodb = require('mongodb')\r\nconst getDb = require('../util/database').getDb\r\n\r\nconst ObjectId = mongodb.ObjectId\r\n\r\nclass User {\r\n  constructor (username, email, cart) {\r\n    this.name = username\r\n    this.name = email\r\n    this.cart = cart // {items: []}\r\n  }\r\n\r\n  save () {\r\n    const db = getDb()\r\n    return db.collection('users').insertOne(this)\r\n  }\r\n\r\n  addToCart (product) {\r\n    const cartProductIndex = this.cart.items.findIndex(cp => {\r\n      return cp.productId.toString() === product._id.toString()\r\n    })\r\n    let newQuantity = 1\r\n    const updatedCartItems = [...this.cart.items]\r\n\r\n    if (cartProductIndex >= 0) {\r\n      newQuantity = this.cart.items[cartProductIndex].quantity + 1\r\n      updatedCartItems[cartProductIndex].quantity = newQuantity\r\n    } else {\r\n      updatedCartItems.push({ productId: new ObjectId(product._id), quantity: newQuantity })\r\n    }\r\n    const updatedCart = {\r\n      items: updatedCartItems\r\n    }\r\n    const db = getDb()\r\n    return db\r\n      .collection('users')\r\n      .updateOne(\r\n        { _id: new ObjectId(this._id) },\r\n        { $set: { cart: updatedCart } }\r\n      )\r\n  }\r\n\r\n  getCart () {\r\n    const db = getDb()\r\n    const productIds = this.cart.items.map(i => {\r\n      return i.productId\r\n    })\r\n    return db\r\n      .collection('products')\r\n      .find({ _id: { $in: productIds } })\r\n      .toArray()\r\n      .then(products => {\r\n        return products.map(p => {\r\n          return {\r\n            ...p,\r\n            quantity: this.cart.items.find(i => {\r\n              return i.productId.toString() === p._id.toString()\r\n            }).quantity\r\n          }\r\n        })\r\n      })\r\n  }\r\n\r\n  deleteItemFromCart (productId) {\r\n    const updatedCartItems = this.cart.items.filter(item => {\r\n      return item.productId.toString() !== productId.toString()\r\n    })\r\n    const db = getDb()\r\n    return db\r\n      .collection('users')\r\n      .updateOne(\r\n        { _id: new ObjectId(this._id) },\r\n        { $set: { cart: { items: updatedCartItems } } }\r\n      )\r\n  }\r\n\r\n  addOrder () {\r\n    const db = getDb()\r\n    return this.getCart()\r\n      .then(products => {\r\n        const order = {\r\n          items: products,\r\n          user: {\r\n            _id: new ObjectId(this._id),\r\n            name: this.name\r\n          }\r\n        }\r\n        return db\r\n          .collection('orders')\r\n          .insertOne(this.cart)\r\n      })\r\n      .then(result => {\r\n        this.cart = { items: [] }\r\n        return db\r\n          .collection('users')\r\n          .updateOne(\r\n            { _id: new ObjectId(this._id) },\r\n            { $set: { cart: { items: [] } } }\r\n          )\r\n      })\r\n  }\r\n\r\n  getOrder () {\r\n    const db = getDb()\r\n    return db\r\n      .collection('orders')\r\n      .find({ 'user._id': new ObjectId(this._id) })\r\n      .toArray()\r\n  }\r\n\r\n  static findById (userId) {\r\n    const db = getDb()\r\n    return db\r\n      .collection('users')\r\n      .findOne({ _id: new ObjectId(userId) })\r\n      .then()\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n}\r\n\r\nmodule.exports = User\r\n"]}