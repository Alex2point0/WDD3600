{"version":3,"sources":["cart.js"],"names":["fs","require","path","p","join","dirname","process","mainModule","filename","Product","module","exports","Cart","_classCallCheck","this","_createClass","key","value","id","productPrice","readFile","err","fileContent","cart","products","totalPrice","JSON","parse","existingProductIndex","findIndex","prod","existingProduct","updatedProduct","_objectSpread","qty","writeFile","stringify","console","log","productQty","updatedCart","find","filter"],"mappings":"+jDAAA,IAAMA,GAAKC,QAAQ,MACbC,KAAOD,QAAQ,QAGfE,EAAID,KAAKE,KACbF,KAAKG,QAAQC,QAAQC,WAAWC,UAChC,OAAQ,aAGJC,QAAUR,QAAQ,aAExBS,OAAOC,QAAP,WAAA,SAAAC,IAAAC,gBAAAC,KAAAF,GAAA,OAAAG,aAAAH,EAAA,KAAA,CAAA,CAAAI,IAAA,aAAAC,MAAA,SACqBC,EAAIC,GAErBnB,GAAGoB,SAASjB,EAAG,SAACkB,EAAKC,GACnB,IAAIC,EAAO,CAAEC,SAAU,GAAIC,WAAY,GAClCJ,IACHE,EAAOG,KAAKC,MAAML,IAGpB,IApBKrB,EAoBC2B,EAAuBL,EAAKC,SAASK,UAAU,SAAAC,GAAI,OAAIA,EAAKZ,KAAOA,IACnEa,EAAkBR,EAAKC,SAASI,GApBlCG,IAwBFC,EAAcC,cAAA,GAAQF,IACPG,IAAMF,EAAeE,IAAM,EAtBxChC,EAAKE,SAALF,mBACHG,EAAQC,UAuBPiB,EAAKC,SAASI,GAAwBI,IAEtCA,EAAiB,CAAEd,GAAIA,EAAIgB,IAAK,GAnBjCvB,EAAAA,SAAAA,GAAAA,OAAAA,mBAAPY,EAAAC,UAAOb,CAAPqB,KAAAT,EAAAE,WAAAF,EAAAE,aAAAN,EAAAnB,GAAAmC,UAAAhC,EAAAuB,KAAAU,UAAAb,GAAA,SAAAF,GAAAgB,QAAAC,IAAAjB,SAAA,CAAAL,IAAA,gBAAAC,MAAA,SAAAC,EAAAC,GAEInB,GAAAoB,SAAAjB,EAAA,SAAAkB,EAAAC,GACAtB,IAAGoB,EAAHpB,CAC6ByB,IAAAA,EAAYQ,cAAA,GAAAP,KAAAC,MAAAL,IAgCjCiB,EAhCNC,EAAAhB,SAAAiB,KAAA,SAAAX,GAAA,OAAAA,EAAAZ,KAAAA,IAgC2BgB,IA/B3BM,EAAUhB,SAAAgB,EAAAhB,SAAAkB,OAAA,SAAAZ,GAAA,OAAAA,EAAAZ,KAAAA,IACRK,EAAOG,WAAWJ,EAAlBG,WAAAN,EAAAoB,EAkCFvC,GAAGmC,UAAUhC,EAAGuB,KAAKU,UAAUI,GAAc,SAAAnB,GAC3CgB,QAAQC,IAAIjB,YAzCpBT,EAAA","file":"cart.min.js","sourcesContent":["const fs = require('fs')\r\nconst path = require('path')\r\n\r\n// will write data content to products.json file\r\nconst p = path.join(\r\n  path.dirname(process.mainModule.filename),\r\n  'data', 'cart.json')\r\n\r\n// constant holding required product location\r\nconst Product = require('./product')\r\n\r\nmodule.exports = class Cart {\r\n  static addProduct (id, productPrice) {\r\n    // Fetch the previous cart\r\n    fs.readFile(p, (err, fileContent) => {\r\n      let cart = { products: [], totalPrice: 0 }\r\n      if (!err) {\r\n        cart = JSON.parse(fileContent)\r\n      }\r\n      // Analyze the cart => Find existing Product\r\n      const existingProductIndex = cart.products.findIndex(prod => prod.id === id)\r\n      const existingProduct = cart.products[existingProductIndex]\r\n      let updatedProduct\r\n      // Add new product/increase quantity\r\n      if (existingProduct) {\r\n        updatedProduct = { ...existingProduct }\r\n        updatedProduct.qty = updatedProduct.qty + 1\r\n        cart.products = [...cart.products]\r\n        cart.products[existingProductIndex] = updatedProduct\r\n      } else {\r\n        updatedProduct = { id: id, qty: 1 }\r\n        cart.products = [...cart.products, updatedProduct]\r\n      }\r\n      cart.totalPrice = cart.totalPrice + +productPrice\r\n      fs.writeFile(p, JSON.stringify(cart), err => {\r\n        console.log(err)\r\n      })\r\n    })\r\n  }\r\n\r\n  static deleteProduct (id, productPrice) {\r\n    fs.readFile(p, (err, fileContent) => {\r\n      if (err) {\r\n        return\r\n      }\r\n      const updatedCart = { ...JSON.parse(fileContent) }\r\n      const product = updatedCart.products.find(prod => prod.id === id)\r\n      const productQty = product.qty\r\n      updatedCart.products = updatedCart.products.filter(prod => prod.id !== id)\r\n      updatedCart.totalPrice = updatedCart.totalPrice - productPrice * productQty\r\n\r\n      fs.writeFile(p, JSON.stringify(updatedCart), err => {\r\n        console.log(err)\r\n      })\r\n    })\r\n  }\r\n}\r\n"]}