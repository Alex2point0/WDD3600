{"version":3,"sources":["product.js"],"names":["fs","require","path","p","join","dirname","process","mainModule","filename","getProductsFromFile","cb","readFile","err","fileContent","JSON","parse","module","exports","title","imageUrl","description","price","products","push","writeFile","stringify","console","log"],"mappings":";;;;;;;;AAAA;AACA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB,C,CAEA;;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB,C,CAEA;;;AACA,IAAME,CAAC,GAAGD,IAAI,CAACE,IAAL,CACRF,IAAI,CAACG,OAAL,CAAaC,OAAO,CAACC,UAAR,CAAmBC,QAAhC,CADQ,EAER,MAFQ,EAEA,eAFA,CAAV,C,CAIA;;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,EAAE,EAAI;AAChCV,EAAAA,EAAE,CAACW,QAAH,CAAYR,CAAZ,EAAe,UAACS,GAAD,EAAMC,WAAN,EAAsB;AACnC,QAAID,GAAJ,EAAS;AACPF,MAAAA,EAAE,CAAC,EAAD,CAAF;AACD,KAFD,MAEO;AACLA,MAAAA,EAAE,CAACI,IAAI,CAACC,KAAL,CAAWF,WAAX,CAAD,CAAF;AACD;AACF,GAND;AAOD,CARD,C,CAUA;;;AACAG,MAAM,CAACC,OAAP;AAAA;AAAA;AACE,mBAAaC,KAAb,EAAoBC,QAApB,EAA8BC,WAA9B,EAA2CC,KAA3C,EAAkD;AAAA;;AAChD,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACD,GANH,CAQE;;;AARF;AAAA;AAAA,2BASU;AAAA;;AACNZ,MAAAA,mBAAmB,CAAC,UAAAa,QAAQ,EAAI;AAC9BA,QAAAA,QAAQ,CAACC,IAAT,CAAc,KAAd;AACAvB,QAAAA,EAAE,CAACwB,SAAH,CAAarB,CAAb,EAAgBW,IAAI,CAACW,SAAL,CAAeH,QAAf,CAAhB,EAA0C,UAACV,GAAD,EAAS;AACjDc,UAAAA,OAAO,CAACC,GAAR,CAAYf,GAAZ;AACD,SAFD;AAGD,OALkB,CAAnB;AAMD,KAhBH,CAkBE;;AAlBF;AAAA;AAAA,6BAmBmBF,EAnBnB,EAmBuB;AACnBD,MAAAA,mBAAmB,CAACC,EAAD,CAAnB;AACD;AArBH;;AAAA;AAAA","sourcesContent":["// fs constant is holding a  a File object\r\nconst fs = require('fs')\r\n\r\n// path constant is holding a required path object, providing a location to access\r\nconst path = require('path')\r\n\r\n// will write data content to products.json file\r\nconst p = path.join(\r\n  path.dirname(process.mainModule.filename),\r\n  'data', 'products.json')\r\n\r\n// call back function to read file content\r\nconst getProductsFromFile = cb => {\r\n  fs.readFile(p, (err, fileContent) => {\r\n    if (err) {\r\n      cb([])\r\n    } else {\r\n      cb(JSON.parse(fileContent))\r\n    }\r\n  })\r\n}\r\n\r\n// exports a product object with all relevant data: title, imgUrl, description, price\r\nmodule.exports = class Product {\r\n  constructor (title, imageUrl, description, price) {\r\n    this.title = title\r\n    this.imageUrl = imageUrl\r\n    this.description = description\r\n    this.price = price\r\n  }\r\n\r\n  // writes product object data as a string to a file\r\n  save () {\r\n    getProductsFromFile(products => {\r\n      products.push(this)\r\n      fs.writeFile(p, JSON.stringify(products), (err) => {\r\n        console.log(err)\r\n      })\r\n    })\r\n  }\r\n\r\n  // similar to a utility function that calls not on a single instance of an object but retrieves all data from object.\r\n  static fetchall (cb) {\r\n    getProductsFromFile(cb)\r\n  }\r\n}\r\n"],"file":"product.dev.js"}