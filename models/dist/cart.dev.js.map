{"version":3,"sources":["cart.js"],"names":["fs","require","path","p","join","dirname","process","mainModule","filename","Product","module","exports","id","productPrice","readFile","err","fileContent","cart","products","totalPrice","JSON","parse","existingProductIndex","findIndex","prod","existingProduct","updatedProduct","qty","writeFile","stringify","console","log","updatedCart","product","find","productQty","filter"],"mappings":"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","sourcesContent":["const fs = require('fs')\r\nconst path = require('path')\r\n\r\n// will write data content to products.json file\r\nconst p = path.join(\r\n  path.dirname(process.mainModule.filename),\r\n  'data', 'cart.json')\r\n\r\n// constant holding required product location\r\nconst Product = require('./product')\r\n\r\nmodule.exports = class Cart {\r\n  static addProduct (id, productPrice) {\r\n    // Fetch the previous cart\r\n    fs.readFile(p, (err, fileContent) => {\r\n      let cart = { products: [], totalPrice: 0 }\r\n      if (!err) {\r\n        cart = JSON.parse(fileContent)\r\n      }\r\n      // Analyze the cart => Find existing Product\r\n      const existingProductIndex = cart.products.findIndex(prod => prod.id === id)\r\n      const existingProduct = cart.products[existingProductIndex]\r\n      let updatedProduct\r\n      // Add new product/increase quantity\r\n      if (existingProduct) {\r\n        updatedProduct = { ...existingProduct }\r\n        updatedProduct.qty = updatedProduct.qty + 1\r\n        cart.products = [...cart.products]\r\n        cart.products[existingProductIndex] = updatedProduct\r\n      } else {\r\n        updatedProduct = { id: id, qty: 1 }\r\n        cart.products = [...cart.products, updatedProduct]\r\n      }\r\n      cart.totalPrice = cart.totalPrice + +productPrice\r\n      fs.writeFile(p, JSON.stringify(cart), err => {\r\n        console.log(err)\r\n      })\r\n    })\r\n  }\r\n\r\n  static deleteProduct (id, productPrice) {\r\n    fs.readFile(p, (err, fileContent) => {\r\n      if (err) {\r\n        return\r\n      }\r\n      const updatedCart = { ...JSON.parse(fileContent) }\r\n      const product = updatedCart.products.find(prod => prod.id === id)\r\n      const productQty = product.qty\r\n      updatedCart.products = updatedCart.products.filter(prod => prod.id !== id)\r\n      updatedCart.totalPrice = updatedCart.totalPrice - productPrice * productQty\r\n\r\n      fs.writeFile(p, JSON.stringify(updatedCart), err => {\r\n        console.log(err)\r\n      })\r\n    })\r\n  }\r\n}\r\n"],"file":"cart.dev.js"}